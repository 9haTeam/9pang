plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.9hateam'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// ✅ QueryDSL 설정 추가
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/querydsl"
        }
    }
}

tasks.register("cleanQuerydsl", Delete) {
    delete file("$buildDir/generated/querydsl")
}

tasks.named("compileJava") {
    dependsOn tasks.named("cleanQuerydsl")
}
repositories {
    mavenCentral()
}
ext {
    set('springCloudVersion', "2024.0.0")
    snippetsDir = file('build/generated-snippets')
}

dependencies {
	// ✅ QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// ✅ JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// ✅ JSON
	implementation 'org.json:json:20231013'

	// ✅ Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// ✅ Thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// ✅ OpenFeign (Spring Cloud)
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// ✅ Spring Boot 기본 스타터
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework:spring-context'

	// ✅ Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// ✅ PostgreSQL
	runtimeOnly 'org.postgresql:postgresql'

	// ✅ 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// ✅ RestDocs 설정
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	configurations "asciidoctorExt"
	inputs.dir snippetsDir
	dependsOn test
}

// ✅ RestDocs를 정적 파일로 복사하는 태스크
tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("${buildDir}/docs/asciidoc") // ✅ 변경된 위치
	into file("src/main/resources/static/docs")
}

tasks.named('build') {
	dependsOn copyDocument
}

// ✅ BootJar 설정 (빌드시 RestDocs 포함)
tasks.named('bootJar') {
	dependsOn copyDocument
	from("${buildDir}/docs/asciidoc") {
		into 'src/main/resources/static/docs'
	}
}