services:
  eureka-server:
    build:
      context: .
      dockerfile: eureka/Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8761
      # 데이터베이스 설정: eureka-db 컨테이너를 사용
      - SPRING_DATASOURCE_URL=jdbc:postgresql://eureka-db:5432/eurekadb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      - eureka-db
    networks:
      - msanet

  eureka-db:
    image: postgres:14
    container_name: eureka-db
    environment:
      - POSTGRES_DB=eurekadb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    networks:
      - msanet

  gateway-service:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      # 내부 네트워크에서 Eureka 서버 접근을 위해 서비스명 사용
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정: gateway-db 컨테이너 사용
      - SPRING_DATASOURCE_URL=jdbc:postgresql://gateway-db:5432/gatewaydb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
    depends_on:
      - gateway-db
      - eureka-server
    networks:
      - msanet

  gateway-db:
    image: postgres:14
    container_name: gateway-db
    environment:
      - POSTGRES_DB=gatewaydb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    networks:
      - msanet

  hubs-service:
    build:
      context: .
      dockerfile: hub/hub/Dockerfile
    container_name: hubs-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - SPRING_APPLICATION_NAME=hubs-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정: hubs-db 컨테이너 사용
      - SPRING_DATASOURCE_URL=jdbc:postgresql://hubs-db:5432/hubsdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    depends_on:
      - hubs-db
      - redis
      - eureka-server
    networks:
      - msanet

  hubs-db:
    image: postgres:14
    container_name: hubs-db
    environment:
      - POSTGRES_DB=hubsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5435:5432"
    networks:
      - msanet

  company-service:
    build:
      context: .
      dockerfile: company/Dockerfile
    container_name: company-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - SPRING_APPLICATION_NAME=company-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정: company-db 컨테이너 사용
      - SPRING_DATASOURCE_URL=jdbc:postgresql://company-db:5432/companydb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      - hubs-service
      - company-db
      - eureka-server
    networks:
      - msanet

  company-db:
    image: postgres:14
    container_name: company-db
    environment:
      - POSTGRES_DB=companydb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5436:5432"
    networks:
      - msanet

  user-service:
    build:
      context: .
      dockerfile: user/Dockerfile
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - SPRING_APPLICATION_NAME=user-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정: hubs-db 컨테이너 사용
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
      - SPRING_SLEUTH_SAMPLER_PROBABILITY=1.0
    depends_on:
      - user-db
      - redis
      - eureka-server
    networks:
      - msanet

  user-db:
    image: postgres:14
    container_name: user-db
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5437:5432"
    networks:
      - msanet

  auth-service:
    build:
      context: .
      dockerfile: auth/Dockerfile
    container_name: auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - SPRING_APPLICATION_NAME=auth-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정: hubs-db 컨테이너 사용
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    depends_on:
      - redis
      - eureka-server
    networks:
      - msanet

  # 주문 서비스 추가
  order-service:
    build:
      context: .
      dockerfile: order/Dockerfile
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - SPRING_APPLICATION_NAME=order-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-db:5432/orderdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      # 서비스 URL 설정
      - SERVICES_COMPANY_URL=http://company-service:8080
      - SERVICES_HUB_URL=http://hubs-service:8080
      - SERVICES_DELIVERY_URL=http://delivery-service:8080
      - SERVICES_MESSAGE_URL=http://message-service:8080
      # Kafka 설정
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - order-db
      - eureka-server
      - kafka
      - company-service
      - hubs-service
      - message-service
    networks:
      - msanet

  order-db:
    image: postgres:14
    container_name: order-db
    environment:
      - POSTGRES_DB=orderdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5438:5432"
    networks:
      - msanet

  # 메시지 서비스 추가
  message-service:
    build:
      context: .
      dockerfile: message/Dockerfile
    container_name: message-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - SPRING_APPLICATION_NAME=message-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # 데이터베이스 설정
      - SPRING_DATASOURCE_URL=jdbc:postgresql://message-db:5432/messagedb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      # Redis 설정
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      # 서비스 URL 설정
      - SERVICES_USER_URL=http://user-service:8080
      - SERVICES_HUB_URL=http://hubs-service:8080
      - SERVICES_DELIVERY_URL=http://delivery-service:8080
      - SERVICES_ORDER_URL=http://order-service:8080
      - SERVICES_COMPANY_URL=http://company-service:8080
      # Kafka 설정
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # Slack 토큰
      - SLACK_TOKEN=${SLACK_TOKEN:-xoxb-your-token}
      - SLACK_API_CHAT_POSTMESSAGE=https://slack.com/api/chat.postMessage
      - SLACK_DAILY_NOTIFICATION_CRON=0 0 6 * * ?
      # Naver API 설정
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID:-your-client-id}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET:-your-client-secret}
      - NAVER_API_DIRECTIONS_URL=https://naveropenapi.apigw.ntruss.com/map-direction/v1
    depends_on:
      - message-db
      - redis
      - eureka-server
      - kafka
    networks:
      - msanet

  message-db:
    image: postgres:14
    container_name: message-db
    environment:
      - POSTGRES_DB=messagedb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5439:5432"
    networks:
      - msanet

  # Kafka 및 Zookeeper 추가
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - msanet

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - msanet

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - msanet

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - msanet

networks:
  msanet:
    driver: bridge