plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'maven-publish'
}

group = 'com.9hateam'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootJar {
	enabled = false
}

jar {
	enabled = true
	archiveClassifier.set('')  // classifier 제거
}

repositories {
	mavenCentral()
}
ext {
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

// ✅ OpenFeign (Spring Cloud)
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

// ✅ eureka-client (Spring Cloud)
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

// ✅ Spring Boot Redis Starter (Spring Data Redis + 기본 클라이언트 Lettuce 포함)
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

// ✅ Date 타입 redis에 저장하기 위해 필요한 의존성
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

// ✅ kafka
	implementation 'org.springframework.kafka:spring-kafka'

//// ✅ (선택) Jedis 클라이언트를 사용하려면 추가
//	implementation 'redis.clients:jedis:5.0.2'
//// Jedis 클라이언트를 사용하여 Redis 데이터베이스에 접근합니다. (Lettuce 대신 Jedis를 사용하려는 경우 추가)

// ✅ (선택) Spring Cache와 함께 사용 시 필요
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.4.0'

// queryDsl
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
// Querydsl을 사용하여 JPA 기반의 타입 안전한 쿼리 기능을 제공합니다.

	annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
// Querydsl 어노테이션 프로세서를 사용하여 Querydsl Q 클래스를 생성합니다.

	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
// Jakarta 어노테이션 API를 사용하여 어노테이션 처리를 지원합니다.

	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
// Jakarta Persistence API를 사용하여 JPA 엔티티 처리를 지원합니다.
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
	repositories {
		mavenLocal()
	}
}

tasks.named('test') {
	useJUnitPlatform()
}