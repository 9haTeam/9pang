plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.9hateam'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// ✅ QueryDSL 설정 추가
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/querydsl"
        }
    }
}

tasks.register("cleanQuerydsl", Delete) {
    delete file("$buildDir/generated/querydsl")
}

tasks.named("compileJava") {
    dependsOn tasks.named("cleanQuerydsl")
}
repositories {
    mavenCentral()
	mavenLocal()
}
ext {
    set('springCloudVersion', "2024.0.0")
    snippetsDir = file('build/generated-snippets')
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

// ✅ OpenFeign (Spring Cloud)
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

// ✅ eureka-client (Spring Cloud)
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

// ✅ Spring Boot Redis Starter (Spring Data Redis + 기본 클라이언트 Lettuce 포함)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

// ✅ Date 타입 redis에 저장하기 위해 필요한 의존성
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'


// ✅ (선택) Spring Cache와 함께 사용 시 필요
    implementation 'org.springframework.boot:spring-boot-starter-cache'

// ✅ kafka
    implementation 'org.springframework.kafka:spring-kafka'

//// ✅ (선택) Jedis 클라이언트를 사용하려면 추가
//	implementation 'redis.clients:jedis:5.0.2'
//// Jedis 클라이언트를 사용하여 Redis 데이터베이스에 접근합니다. (Lettuce 대신 Jedis를 사용하려는 경우 추가)

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

// queryDsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
// Querydsl을 사용하여 JPA 기반의 타입 안전한 쿼리 기능을 제공합니다.

    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
// Querydsl 어노테이션 프로세서를 사용하여 Querydsl Q 클래스를 생성합니다.

    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
// Jakarta 어노테이션 API를 사용하여 어노테이션 처리를 지원합니다.

    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
// Jakarta Persistence API를 사용하여 JPA 엔티티 처리를 지원합니다.

	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// ✅ JSON
	implementation 'org.json:json:20231013'

	implementation 'org.springframework:spring-context'

	// ✅ 공통 모듈
	implementation 'com.9hateam:common:0.0.1-SNAPSHOT'
    implementation 'org.projectlombok:lombok:1.18.28'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// ✅ RestDocs 설정
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	configurations "asciidoctorExt"
	inputs.dir snippetsDir
	dependsOn test
}

// ✅ RestDocs를 정적 파일로 복사하는 태스크
tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("${buildDir}/docs/asciidoc") // ✅ 변경된 위치
	into file("src/main/resources/static/docs")
}

tasks.named('build') {
	dependsOn copyDocument
}

// ✅ BootJar 설정 (빌드시 RestDocs 포함)
tasks.named('bootJar') {
	dependsOn copyDocument
	from("${buildDir}/docs/asciidoc") {
		into 'src/main/resources/static/docs'
	}
}